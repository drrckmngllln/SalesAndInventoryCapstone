'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace SalesAndInventoryCapstone.Forms.Report
    
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("ReportDs"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class ReportDs
        Inherits Global.System.Data.DataSet
        
        Private tableMonthlyReport As MonthlyReportDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called"& _ 
            " or extended by application code.", DiagnosticId:="SYSLIB0051")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("MonthlyReport")) Is Nothing) Then
                    MyBase.Tables.Add(New MonthlyReportDataTable(ds.Tables("MonthlyReport")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property MonthlyReport() As MonthlyReportDataTable
            Get
                Return Me.tableMonthlyReport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As ReportDs = CType(MyBase.Clone,ReportDs)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("MonthlyReport")) Is Nothing) Then
                    MyBase.Tables.Add(New MonthlyReportDataTable(ds.Tables("MonthlyReport")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableMonthlyReport = CType(MyBase.Tables("MonthlyReport"),MonthlyReportDataTable)
            If (initTable = true) Then
                If (Not (Me.tableMonthlyReport) Is Nothing) Then
                    Me.tableMonthlyReport.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "ReportDs"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/ReportDs.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableMonthlyReport = New MonthlyReportDataTable()
            MyBase.Tables.Add(Me.tableMonthlyReport)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function ShouldSerializeMonthlyReport() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As ReportDs = New ReportDs()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Delegate Sub MonthlyReportRowChangeEventHandler(ByVal sender As Object, ByVal e As MonthlyReportRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class MonthlyReportDataTable
            Inherits Global.System.Data.TypedTableBase(Of MonthlyReportRow)
            
            Private columnId As Global.System.Data.DataColumn
            
            Private columnReferenceNumber As Global.System.Data.DataColumn
            
            Private columnTotalSales As Global.System.Data.DataColumn
            
            Private columnCashGiven As Global.System.Data.DataColumn
            
            Private columnLastName As Global.System.Data.DataColumn
            
            Private columnFirstName As Global.System.Data.DataColumn
            
            Private columnMiddleName As Global.System.Data.DataColumn
            
            Private columnCreatedAt As Global.System.Data.DataColumn
            
            Private columnOriginalPrice As Global.System.Data.DataColumn
            
            Private columnSellingPrice As Global.System.Data.DataColumn
            
            Private columnProfit As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "MonthlyReport"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
             System.ObsoleteAttribute("This API supports obsolete formatter-based serialization. It should not be called"& _ 
                " or extended by application code.", DiagnosticId:="SYSLIB0051")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property ReferenceNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnReferenceNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property TotalSalesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTotalSales
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property CashGivenColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCashGiven
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLastName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFirstName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMiddleName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property CreatedAtColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedAt
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property OriginalPriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnOriginalPrice
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property SellingPriceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSellingPrice
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property ProfitColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnProfit
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As MonthlyReportRow
                Get
                    Return CType(Me.Rows(index),MonthlyReportRow)
                End Get
            End Property
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Event MonthlyReportRowChanging As MonthlyReportRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Event MonthlyReportRowChanged As MonthlyReportRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Event MonthlyReportRowDeleting As MonthlyReportRowChangeEventHandler
            
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Event MonthlyReportRowDeleted As MonthlyReportRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Overloads Sub AddMonthlyReportRow(ByVal row As MonthlyReportRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Overloads Function AddMonthlyReportRow(ByVal Id As String, ByVal ReferenceNumber As String, ByVal TotalSales As Decimal, ByVal CashGiven As String, ByVal LastName As String, ByVal FirstName As String, ByVal MiddleName As String, ByVal CreatedAt As Date, ByVal OriginalPrice As Decimal, ByVal SellingPrice As Decimal, ByVal Profit As Decimal) As MonthlyReportRow
                Dim rowMonthlyReportRow As MonthlyReportRow = CType(Me.NewRow,MonthlyReportRow)
                Dim columnValuesArray() As Object = New Object() {Id, ReferenceNumber, TotalSales, CashGiven, LastName, FirstName, MiddleName, CreatedAt, OriginalPrice, SellingPrice, Profit}
                rowMonthlyReportRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowMonthlyReportRow)
                Return rowMonthlyReportRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As MonthlyReportDataTable = CType(MyBase.Clone,MonthlyReportDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New MonthlyReportDataTable()
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnId = MyBase.Columns("Id")
                Me.columnReferenceNumber = MyBase.Columns("ReferenceNumber")
                Me.columnTotalSales = MyBase.Columns("TotalSales")
                Me.columnCashGiven = MyBase.Columns("CashGiven")
                Me.columnLastName = MyBase.Columns("LastName")
                Me.columnFirstName = MyBase.Columns("FirstName")
                Me.columnMiddleName = MyBase.Columns("MiddleName")
                Me.columnCreatedAt = MyBase.Columns("CreatedAt")
                Me.columnOriginalPrice = MyBase.Columns("OriginalPrice")
                Me.columnSellingPrice = MyBase.Columns("SellingPrice")
                Me.columnProfit = MyBase.Columns("Profit")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Sub InitClass()
                Me.columnId = New Global.System.Data.DataColumn("Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnId)
                Me.columnReferenceNumber = New Global.System.Data.DataColumn("ReferenceNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnReferenceNumber)
                Me.columnTotalSales = New Global.System.Data.DataColumn("TotalSales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTotalSales)
                Me.columnCashGiven = New Global.System.Data.DataColumn("CashGiven", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCashGiven)
                Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLastName)
                Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirstName)
                Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMiddleName)
                Me.columnCreatedAt = New Global.System.Data.DataColumn("CreatedAt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedAt)
                Me.columnOriginalPrice = New Global.System.Data.DataColumn("OriginalPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOriginalPrice)
                Me.columnSellingPrice = New Global.System.Data.DataColumn("SellingPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSellingPrice)
                Me.columnProfit = New Global.System.Data.DataColumn("Profit", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnProfit)
                Me.columnReferenceNumber.AllowDBNull = false
                Me.columnCreatedAt.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function NewMonthlyReportRow() As MonthlyReportRow
                Return CType(Me.NewRow,MonthlyReportRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New MonthlyReportRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(MonthlyReportRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.MonthlyReportRowChangedEvent) Is Nothing) Then
                    RaiseEvent MonthlyReportRowChanged(Me, New MonthlyReportRowChangeEvent(CType(e.Row,MonthlyReportRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.MonthlyReportRowChangingEvent) Is Nothing) Then
                    RaiseEvent MonthlyReportRowChanging(Me, New MonthlyReportRowChangeEvent(CType(e.Row,MonthlyReportRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.MonthlyReportRowDeletedEvent) Is Nothing) Then
                    RaiseEvent MonthlyReportRowDeleted(Me, New MonthlyReportRowChangeEvent(CType(e.Row,MonthlyReportRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.MonthlyReportRowDeletingEvent) Is Nothing) Then
                    RaiseEvent MonthlyReportRowDeleting(Me, New MonthlyReportRowChangeEvent(CType(e.Row,MonthlyReportRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub RemoveMonthlyReportRow(ByVal row As MonthlyReportRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As ReportDs = New ReportDs()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "MonthlyReportDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class MonthlyReportRow
            Inherits Global.System.Data.DataRow
            
            Private tableMonthlyReport As MonthlyReportDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableMonthlyReport = CType(Me.Table,MonthlyReportDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property Id() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.IdColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Id' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.IdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property ReferenceNumber() As String
                Get
                    Return CType(Me(Me.tableMonthlyReport.ReferenceNumberColumn),String)
                End Get
                Set
                    Me(Me.tableMonthlyReport.ReferenceNumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property TotalSales() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.TotalSalesColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TotalSales' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.TotalSalesColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property CashGiven() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.CashGivenColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CashGiven' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.CashGivenColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property LastName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.LastNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.LastNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property FirstName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.FirstNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.FirstNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property MiddleName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.MiddleNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.MiddleNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property CreatedAt() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.CreatedAtColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedAt' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.CreatedAtColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property OriginalPrice() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.OriginalPriceColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'OriginalPrice' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.OriginalPriceColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property SellingPrice() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.SellingPriceColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SellingPrice' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.SellingPriceColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Property Profit() As Decimal
                Get
                    Try 
                        Return CType(Me(Me.tableMonthlyReport.ProfitColumn),Decimal)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Profit' in table 'MonthlyReport' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMonthlyReport.ProfitColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsIdNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.IdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetIdNull()
                Me(Me.tableMonthlyReport.IdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsTotalSalesNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.TotalSalesColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetTotalSalesNull()
                Me(Me.tableMonthlyReport.TotalSalesColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsCashGivenNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.CashGivenColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetCashGivenNull()
                Me(Me.tableMonthlyReport.CashGivenColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsLastNameNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.LastNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetLastNameNull()
                Me(Me.tableMonthlyReport.LastNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsFirstNameNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.FirstNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetFirstNameNull()
                Me(Me.tableMonthlyReport.FirstNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsMiddleNameNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.MiddleNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetMiddleNameNull()
                Me(Me.tableMonthlyReport.MiddleNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsCreatedAtNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.CreatedAtColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetCreatedAtNull()
                Me(Me.tableMonthlyReport.CreatedAtColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsOriginalPriceNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.OriginalPriceColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetOriginalPriceNull()
                Me(Me.tableMonthlyReport.OriginalPriceColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsSellingPriceNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.SellingPriceColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetSellingPriceNull()
                Me(Me.tableMonthlyReport.SellingPriceColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function IsProfitNull() As Boolean
                Return Me.IsNull(Me.tableMonthlyReport.ProfitColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub SetProfitNull()
                Me(Me.tableMonthlyReport.ProfitColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Class MonthlyReportRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As MonthlyReportRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Sub New(ByVal row As MonthlyReportRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property Row() As MonthlyReportRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
